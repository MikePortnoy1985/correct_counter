{"version":3,"sources":["components/CounterDisplay/CounterDisplay.tsx","components/SetUpDisplay/SetUpDisplay.tsx","App.tsx","index.tsx"],"names":["CounterDisplay","props","Grid","container","justify","item","key","style","width","height","textAlign","verticalAlign","error","FormControl","OutlinedInput","className","label","value","maxValue","margin","type","marginRight","Button","variant","color","onClick","countHandler","disabled","startValue","reset","SetupDisplay","direction","alignItems","onChange","event","setMaxValue","Number","parseInt","currentTarget","setDisabled","setStartValue","setter","App","useState","count","setCount","setError","useEffect","errorHandler","sV","localStorage","getItem","mV","clear","Container","marginTop","spacing","Paper","backgroundColor","padding","elevation","SetUpDisplay","setItem","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3f0ceac0.chunk.js","sourcesContent":["import React from 'react'\nimport { OutlinedInput, FormControl, Button, Grid } from '@material-ui/core'\nimport './../../App.css'\n\ntype CounterDisplayPropsType = {\n\tstartValue: number\n\tmaxValue: number\n\tvalue: number\n\terror: string\n\tcountHandler: () => void\n\treset: () => void\n}\n\nfunction CounterDisplay(props: CounterDisplayPropsType) {\n\treturn (\n\t\t<Grid container justify='space-around'>\n\t\t\t<Grid item key={'a'} style={{ width: '260px', height: '190px', textAlign: 'center', verticalAlign: 'center' }}>\n\t\t\t\t{props.error ? (\n\t\t\t\t\tprops.error\n\t\t\t\t) : (\n\t\t\t\t\t<FormControl>\n\t\t\t\t\t\t<OutlinedInput\n\t\t\t\t\t\t\tclassName={'label'}\n\t\t\t\t\t\t\tlabel='Counter'\n\t\t\t\t\t\t\tvalue={props.value === props.maxValue ? 'Maximum value reached' : props.value}\n\t\t\t\t\t\t\tstyle={{ margin: '20px' }}\n\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</FormControl>\n\t\t\t\t)}\n\t\t\t</Grid>\n\t\t\t<Grid item key={'b'}>\n\t\t\t\t<Grid container>\n\t\t\t\t\t<Grid item key={1} style={{ marginRight: '20px' }}>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tvariant='contained'\n\t\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\t\tonClick={() => props.countHandler()}\n\t\t\t\t\t\t\tdisabled={\n\t\t\t\t\t\t\t\tprops.value < props.startValue || props.value === props.maxValue || props.error ? true : false\n\t\t\t\t\t\t\t}>\n\t\t\t\t\t\t\tIncrese\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Grid>\n\t\t\t\t\t<Grid item key={2}>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tvariant='contained'\n\t\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\t\tonClick={() => props.reset()}\n\t\t\t\t\t\t\tdisabled={props.value <= props.startValue || props.error ? true : false}>\n\t\t\t\t\t\t\tReset\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t</Grid>\n\t)\n}\n\nexport default CounterDisplay\n","import React, { ChangeEvent } from 'react'\nimport { OutlinedInput, FormControl, Button, Grid } from '@material-ui/core'\nimport './../../App.css'\n\ntype SetUpDisplayPropsType = {\n\tstartValue: number\n\tmaxValue: number\n\tdisabled: boolean\n\terror: string\n\tsetStartValue: (value: number) => void\n\tsetMaxValue: (value: number) => void\n\tsetter: () => void\n\terrorHandler: () => void\n\tsetDisabled: (disabled: boolean) => void\n}\n\nfunction SetupDisplay(props: SetUpDisplayPropsType) {\n\tconst onChangeStartValueHandler = (event: ChangeEvent<HTMLInputElement>) => {\n\t\tprops.setStartValue(Number.parseInt(event.currentTarget.value))\n\t}\n\n\tconst onChangeMaxValueHandler = (event: ChangeEvent<HTMLInputElement>) => {\n\t\tprops.setMaxValue(Number.parseInt(event.currentTarget.value))\n\t\tprops.setDisabled(false)\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<Grid container direction='column' justify='center' alignItems='center'>\n\t\t\t\t<FormControl error={props.error === 'Incorrect value' ? true : false}>\n\t\t\t\t\t<OutlinedInput\n\t\t\t\t\t\tclassName={'label'}\n\t\t\t\t\t\tlabel='Max value'\n\t\t\t\t\t\ttype={'number'}\n\t\t\t\t\t\tstyle={{ margin: '20px' }}\n\t\t\t\t\t\tvalue={props.maxValue}\n\t\t\t\t\t\tonChange={onChangeMaxValueHandler}\n\t\t\t\t\t/>\n\t\t\t\t</FormControl>\n\n\t\t\t\t<FormControl error={props.error === 'Incorrect value' ? true : false}>\n\t\t\t\t\t<OutlinedInput\n\t\t\t\t\t\tclassName={'label'}\n\t\t\t\t\t\tlabel='Start value'\n\t\t\t\t\t\ttype={'number'}\n\t\t\t\t\t\tstyle={{ margin: '20px' }}\n\t\t\t\t\t\tvalue={props.startValue}\n\t\t\t\t\t\tonChange={onChangeStartValueHandler}\n\t\t\t\t\t/>\n\t\t\t\t</FormControl>\n\n\t\t\t\t<Button variant='contained' color='primary' onClick={() => props.setter()} disabled={props.disabled}>\n\t\t\t\t\tSet\n\t\t\t\t</Button>\n\t\t\t</Grid>\n\t\t</>\n\t)\n}\n\nexport default SetupDisplay\n","import React, { useState, useEffect } from 'react'\nimport CounterDisplay from './components/CounterDisplay/CounterDisplay'\nimport SetUpDisplay from './components/SetUpDisplay/SetUpDisplay'\nimport './App.css'\nimport { Container, Grid, Paper } from '@material-ui/core'\n\nfunction App() {\n\tconst [count, setCount] = useState(0)\n\tconst [startValue, setStartValue] = useState(0)\n\tconst [maxValue, setMaxValue] = useState(0)\n\tconst [error, setError] = useState('enter values and press \"set\"')\n\tconst [disabled, setDisabled] = useState(true)\n\n\tuseEffect(() => {\n\t\terrorHandler()\n\t}, [startValue]) // eslint-disable-line react-hooks/exhaustive-deps\n\n\tuseEffect(() => {\n\t\terrorHandler()\n\t}, [maxValue]) // eslint-disable-line react-hooks/exhaustive-deps\n\n\tuseEffect(() => {\n\t\tif (startValue === 0) {\n\t\t\tconst sV = localStorage.getItem('startValue')\n\t\t\tsV && setStartValue(+sV)\n\t\t}\n\t}, [startValue]) // eslint-disable-line react-hooks/exhaustive-deps\n\n\tuseEffect(() => {\n\t\tif (maxValue === 0) {\n\t\t\tconst mV = localStorage.getItem('maxValue')\n\t\t\tmV && setMaxValue(+mV) \n\t\t\tlocalStorage.clear()\n\t\t}\n\t}, [maxValue]) // eslint-disable-line react-hooks/exhaustive-deps\n\n\tconst countHandler = () => {\n\t\tif (count < maxValue) setCount(count + 1)\n\t}\n\n\tconst errorHandler = () => {\n\t\tif (startValue < 0 || (startValue > 0 && startValue === maxValue) || maxValue < startValue) {\n\t\t\tsetError('Incorrect value')\n\t\t\tsetDisabled(true)\n\t\t} else {\n\t\t\tsetError('enter values and press \"set\"')\n\t\t\tsetDisabled(false)\n\t\t}\n\t}\n\n\tconst setter = () => {\n\t\tif (startValue >= 0 && maxValue > startValue) {\n\t\t\tsetCount(startValue)\n\t\t\tsetError('')\n\t\t\tlocalStorage.setItem('startValue', startValue + '')\n\t\t\tlocalStorage.setItem('maxValue', maxValue + '')\n\t\t}\n\t\tsetDisabled(true)\n\t}\n\n\tconst reset = () => {\n\t\tsetCount(startValue)\n\t}\n\n\treturn (\n\t\t<Container>\n\t\t\t<Grid container style={{ marginTop: '10%' }} spacing={10} direction='row' justify='center' alignItems='center'>\n\t\t\t\t<Grid item key={1}>\n\t\t\t\t\t<Paper\n\t\t\t\t\t\tstyle={{ backgroundColor: '#06BAC5', padding: '20px', width: '300px', height: '250px' }}\n\t\t\t\t\t\televation={3}>\n\t\t\t\t\t\t<SetUpDisplay\n\t\t\t\t\t\t\tsetStartValue={setStartValue}\n\t\t\t\t\t\t\tsetMaxValue={setMaxValue}\n\t\t\t\t\t\t\tstartValue={startValue}\n\t\t\t\t\t\t\tmaxValue={maxValue}\n\t\t\t\t\t\t\tsetter={setter}\n\t\t\t\t\t\t\terrorHandler={errorHandler}\n\t\t\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\t\t\tsetDisabled={setDisabled}\n\t\t\t\t\t\t\terror={error}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Paper>\n\t\t\t\t</Grid>\n\t\t\t\t<Grid item key={2}>\n\t\t\t\t\t<Paper\n\t\t\t\t\t\tstyle={{ backgroundColor: '#06BAC5', padding: '20px', width: '300px', height: '250px' }}\n\t\t\t\t\t\televation={3}>\n\t\t\t\t\t\t<CounterDisplay\n\t\t\t\t\t\t\tvalue={count}\n\t\t\t\t\t\t\tcountHandler={countHandler}\n\t\t\t\t\t\t\tstartValue={startValue}\n\t\t\t\t\t\t\tmaxValue={maxValue}\n\t\t\t\t\t\t\treset={reset}\n\t\t\t\t\t\t\terror={error}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Paper>\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t</Container>\n\t)\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}