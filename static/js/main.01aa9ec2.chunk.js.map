{"version":3,"sources":["components/CounterDisplay/CounterDisplay.tsx","components/SetUpDisplay/SetUpDisplay.tsx","App.tsx","index.tsx"],"names":["CounterDisplay","props","Grid","container","direction","justify","alignItems","spacing","item","key","xs","error","FormControl","OutlinedInput","className","label","value","maxValue","type","Button","variant","color","onClick","countHandler","disabled","startValue","reset","SetupDisplay","onChange","event","setMaxValue","Number","parseInt","currentTarget","setStartValue","setHandler","App","useState","count","setCount","setError","setDisabled","useEffect","errorHandler","sV","localStorage","getItem","mV","clear","style","marginTop","Paper","elevation","SetUpDisplay","setItem","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.01aa9ec2.chunk.js","sourcesContent":["import React from 'react'\nimport { OutlinedInput, FormControl, Button, Grid } from '@material-ui/core'\nimport './../../App.css'\n\ntype CounterDisplayPropsType = {\n\tstartValue: number\n\tmaxValue: number\n\tvalue: number\n\terror: string\n\tcountHandler: () => void\n\treset: () => void\n}\n\nfunction CounterDisplay(props: CounterDisplayPropsType) {\n\treturn (\n\t\t<Grid container direction='column' justify='space-between' alignItems='center' spacing={3}>\n\t\t\t<Grid\titem\tkey={'a'} xs={12}>\n\t\t\t\t{props.error ? (\n\t\t\t\t\tprops.error\n\t\t\t\t) : (\n\t\t\t\t\t<FormControl>\n\t\t\t\t\t\t<OutlinedInput\n\t\t\t\t\t\t\tclassName={'label'}\n\t\t\t\t\t\t\tlabel='Counter'\n\t\t\t\t\t\t\tvalue={props.value === props.maxValue ? 'Maximum value reached' : props.value}\n\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</FormControl>\n\t\t\t\t)}\n\t\t\t</Grid>\n\t\t\t<Grid item key={'b'} xs={12} container direction='row' justify='center' alignItems='center'>\n\t\t\t\t<Grid item key={111} xs={3}>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant='contained'\n\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\tonClick={() => props.countHandler()}\n\t\t\t\t\t\tdisabled={\n\t\t\t\t\t\t\tprops.value < props.startValue || props.value === props.maxValue || props.error ? true : false\n\t\t\t\t\t\t}>\n\t\t\t\t\t\tIncrese\n\t\t\t\t\t</Button>\n\t\t\t\t</Grid>\n\t\t\t\t<Grid item key={112} xs={3}>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant='contained'\n\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\tonClick={() => props.reset()}\n\t\t\t\t\t\tdisabled={props.value <= props.startValue || props.error ? true : false}>\n\t\t\t\t\t\tReset\n\t\t\t\t\t</Button>\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t</Grid>\n\t)\n}\n\nexport default CounterDisplay\n","import React, { ChangeEvent } from 'react'\nimport { OutlinedInput, FormControl, Button, Grid } from '@material-ui/core'\nimport './../../App.css'\n\ntype SetUpDisplayPropsType = {\n\tstartValue: number\n\tmaxValue: number\n\tdisabled: boolean\n\terror: string\n\tsetStartValue: (value: number) => void\n\tsetMaxValue: (value: number) => void\n\tsetHandler: () => void\n\terrorHandler: () => void\n\tsetDisabled: (disabled: boolean) => void\n}\n\nfunction SetupDisplay(props: SetUpDisplayPropsType) {\n\tconst onChangeStartValueHandler = (event: ChangeEvent<HTMLInputElement>) => {\n\t\tprops.setStartValue(Number.parseInt(event.currentTarget.value))\n\t}\n\n\tconst onChangeMaxValueHandler = (event: ChangeEvent<HTMLInputElement>) => {\n\t\tprops.setMaxValue(Number.parseInt(event.currentTarget.value))\n\t}\n\n\treturn (\n\t\t\n\t\t\t<Grid container direction='column' justify='space-between' alignItems='center' spacing={3}>\n\t\t\t\t<Grid item xs={12} key={11}>\n\t\t\t\t\t<FormControl error={props.error === 'Incorrect value' ? true : false}>\n\t\t\t\t\t\t<OutlinedInput\n\t\t\t\t\t\t\tclassName={'label'}\n\t\t\t\t\t\t\tlabel='Max value'\n\t\t\t\t\t\t\ttype={'number'}\t\t\t\t\t\t\n\t\t\t\t\t\t\tvalue={props.maxValue}\n\t\t\t\t\t\t\tonChange={onChangeMaxValueHandler}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</FormControl>\n\t\t\t\t</Grid>\n\t\t\t\t<Grid item xs={12} key={12}>\n\t\t\t\t\t<FormControl error={props.error === 'Incorrect value' ? true : false}>\n\t\t\t\t\t\t<OutlinedInput\n\t\t\t\t\t\t\tclassName={'label'}\n\t\t\t\t\t\t\tlabel='Start value'\n\t\t\t\t\t\t\ttype={'number'}\t\t\t\t\t\t\n\t\t\t\t\t\t\tvalue={props.startValue}\n\t\t\t\t\t\t\tonChange={onChangeStartValueHandler}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</FormControl>\n\t\t\t\t</Grid>\n\t\t\t\t<Grid item xs={12} key={1}>\n\t\t\t\t\t<Button variant='contained' color='primary' onClick={() => props.setHandler()} disabled={props.disabled}>\n\t\t\t\t\t\tSet\n\t\t\t\t\t</Button>\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t\n\t)\n}\n\nexport default SetupDisplay\n","import React, { useState, useEffect } from 'react'\nimport CounterDisplay from './components/CounterDisplay/CounterDisplay'\nimport SetUpDisplay from './components/SetUpDisplay/SetUpDisplay'\nimport './App.css'\nimport { Grid, Paper } from '@material-ui/core'\n\nfunction App() {\n\tconst [count, setCount] = useState(0)\n\tconst [startValue, setStartValue] = useState(0)\n\tconst [maxValue, setMaxValue] = useState(0)\n\tconst [error, setError] = useState('enter values and press \"set\"')\n\tconst [disabled, setDisabled] = useState(true)\n\n\tuseEffect(() => {\n\t\terrorHandler()\n\t}, [startValue, maxValue]) // eslint-disable-line react-hooks/exhaustive-deps\n\n\tuseEffect(() => {\n\t\tif (startValue === 0) {\n\t\t\tconst sV = localStorage.getItem('startValue')\n\t\t\tsV && setStartValue(+sV)\n\t\t}\n\t}, [startValue]) // eslint-disable-line react-hooks/exhaustive-deps\n\n\tuseEffect(() => {\n\t\tif (maxValue === 0) {\n\t\t\tconst mV = localStorage.getItem('maxValue')\n\t\t\tmV && setMaxValue(+mV)\n\t\t\tlocalStorage.clear()\n\t\t}\n\t}, [maxValue]) // eslint-disable-line react-hooks/exhaustive-deps\n\n\tconst countHandler = () => {\n\t\tif (count < maxValue) setCount(count + 1)\n\t}\n\n\tconst errorHandler = () => {\n\t\tif (startValue < 0 || (startValue > 0 && startValue === maxValue) || maxValue < startValue) {\n\t\t\tsetError('Incorrect value')\n\t\t\tsetDisabled(true)\n\t\t} else {\n\t\t\tsetError('enter values and press \"set\"')\n\t\t\tsetDisabled(false)\n\t\t}\n\t}\n\n\tconst setHandler = () => {\n\t\tif (startValue >= 0 && maxValue > startValue) {\n\t\t\tsetCount(startValue)\n\t\t\tsetError('')\n\t\t\tlocalStorage.setItem('startValue', startValue + '')\n\t\t\tlocalStorage.setItem('maxValue', maxValue + '')\n\t\t}\n\t\tsetDisabled(true)\n\t}\n\n\tconst reset = () => {\n\t\tsetCount(startValue)\n\t}\n\n\treturn (\n\t\t<Grid container style={{ marginTop: '15vh' }} spacing={10} direction='row' justify='center' alignItems='center'>\n\t\t\t<Grid item xs={3} key={1}>\n\t\t\t\t<Paper elevation={3}>\n\t\t\t\t\t<SetUpDisplay\n\t\t\t\t\t\tsetStartValue={setStartValue}\n\t\t\t\t\t\tsetMaxValue={setMaxValue}\n\t\t\t\t\t\tstartValue={startValue}\n\t\t\t\t\t\tmaxValue={maxValue}\n\t\t\t\t\t\tsetHandler={setHandler}\n\t\t\t\t\t\terrorHandler={errorHandler}\n\t\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\t\tsetDisabled={setDisabled}\n\t\t\t\t\t\terror={error}\n\t\t\t\t\t/>\n\t\t\t\t</Paper>\n\t\t\t</Grid>\n\t\t\t<Grid item xs={3} key={2}>\n\t\t\t\t<Paper elevation={3}>\n\t\t\t\t\t<CounterDisplay\n\t\t\t\t\t\tvalue={count}\n\t\t\t\t\t\tcountHandler={countHandler}\n\t\t\t\t\t\tstartValue={startValue}\n\t\t\t\t\t\tmaxValue={maxValue}\n\t\t\t\t\t\treset={reset}\n\t\t\t\t\t\terror={error}\n\t\t\t\t\t/>\n\t\t\t\t</Paper>\n\t\t\t</Grid>\n\t\t</Grid>\n\t)\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}