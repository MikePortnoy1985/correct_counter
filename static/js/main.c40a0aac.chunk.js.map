{"version":3,"sources":["components/CounterDisplay/CounterDisplay.tsx","components/SetUpDisplay/SetUpDisplay.tsx","styles/theme.ts","App.tsx","index.tsx"],"names":["CounterDisplay","startValue","maxValue","value","error","countHandler","reset","TextField","variant","label","type","Button","style","marginRight","color","onClick","disableRipple","disabled","useStyles","makeStyles","textField","backgroundColor","borderRadius","SetupDisplay","setStartValue","setMaxValue","setHandler","localStorageHandler","classes","className","onChange","event","Number","parseInt","currentTarget","theme","createMuiTheme","palette","primary","main","background","paper","default","grid","height","marginTop","width","display","flexDirection","justifyContent","alignItems","App","useState","count","setCount","setError","setDisabled","useEffect","errorHandler","getLocalStorage","sV","localStorage","getItem","mV","clear","ThemeProvider","CssBaseline","Grid","container","spacing","direction","justify","item","xs","key","Paper","elevation","SetUpDisplay","setItem","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c40a0aac.chunk.js","sourcesContent":["import React from 'react'\nimport { TextField, Button } from '@material-ui/core'\nimport './../../App.css'\n\ntype CounterDisplayPropsType = {\n\tstartValue: number\n\tmaxValue: number\n\tvalue: number\n\terror: string\n\tcountHandler: () => void\n\treset: () => void\n}\n\nfunction CounterDisplay({ startValue, maxValue, value, error, countHandler, reset }: CounterDisplayPropsType) {\n\treturn (\n\t\t<>\n\t\t\t<div>\n\t\t\t\t{error ? (\n\t\t\t\t\terror\n\t\t\t\t) : (\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tlabel=\"Counter\"\n\t\t\t\t\t\tvalue={value === maxValue ? 'Maximum value reached' : value}\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<Button\n\t\t\t\t\tstyle={{ marginRight: '20px' }}\n\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\tonClick={() => countHandler()}\n\t\t\t\t\tdisableRipple\n\t\t\t\t\tdisabled={!!(value < startValue || value === maxValue || error)}>\n\t\t\t\t\tIncrease\n\t\t\t\t</Button>\n\t\t\t\t<Button\n\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\tonClick={() => reset()}\n\t\t\t\t\tdisableRipple\n\t\t\t\t\tdisabled={!!(value <= startValue || error)}>\n\t\t\t\t\tReset\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t</>\n\t)\n}\n\nexport default CounterDisplay\n","import React, { ChangeEvent } from 'react'\nimport { Button, makeStyles, TextField } from '@material-ui/core'\nimport './../../App.css'\n\ntype SetUpDisplayPropsType = {\n\tstartValue: number\n\tmaxValue: number\n\tdisabled: boolean\n\terror: string\n\tsetStartValue: (value: number) => void\n\tsetMaxValue: (value: number) => void\n\tsetHandler: () => void\n\tlocalStorageHandler: () => void\n}\n\nconst useStyles = makeStyles({\n\ttextField: {\n\t\tbackgroundColor: 'white',\n\t\tborderRadius: '4px',\n\t},\n})\nfunction SetupDisplay({\n\tstartValue,\n\tmaxValue,\n\tdisabled,\n\terror,\n\tsetStartValue,\n\tsetMaxValue,\n\tsetHandler,\n\tlocalStorageHandler,\n}: SetUpDisplayPropsType) {\n\tconst onChangeStartValueHandler = (event: ChangeEvent<HTMLInputElement>) => {\n\t\tsetStartValue(Number.parseInt(event.currentTarget.value))\n\t}\n\n\tconst onChangeMaxValueHandler = (event: ChangeEvent<HTMLInputElement>) => {\n\t\tsetMaxValue(Number.parseInt(event.currentTarget.value))\n\t}\n\n\tconst classes = useStyles()\n\treturn (\n\t\t<>\n\t\t\t<TextField\n\t\t\t\tclassName={classes.textField}\n\t\t\t\tvariant=\"outlined\"\n\t\t\t\terror={error === 'Incorrect value'}\n\t\t\t\tlabel=\"Max value\"\n\t\t\t\ttype=\"number\"\n\t\t\t\tvalue={maxValue}\n\t\t\t\tonChange={onChangeMaxValueHandler}\n\t\t\t/>\n\t\t\t<TextField\n\t\t\t\tclassName={classes.textField}\n\t\t\t\tvariant=\"outlined\"\n\t\t\t\terror={error === 'Incorrect value'}\n\t\t\t\tlabel=\"Start value\"\n\t\t\t\ttype=\"number\"\n\t\t\t\tvalue={startValue}\n\t\t\t\tonChange={onChangeStartValueHandler}\n\t\t\t/>\n\t\t\t<Button\n\t\t\t\tdisableRipple\n\t\t\t\tvariant=\"contained\"\n\t\t\t\tcolor=\"primary\"\n\t\t\t\tonClick={() => {\n\t\t\t\t\tsetHandler()\n\t\t\t\t\tlocalStorageHandler()\n\t\t\t\t}}\n\t\t\t\tdisabled={disabled}>\n\t\t\t\tSet\n\t\t\t</Button>\n\t\t</>\n\t)\n}\n\nexport default SetupDisplay\n","import { createMuiTheme } from '@material-ui/core/styles'\n\nconst theme = createMuiTheme({\n\tpalette: {\n\t\tprimary: {\n\t\t\tmain: '#101E5A',\n\t\t},\n\t\tbackground: {\n\t\t\tpaper: '#5D80B6',\n\t\t\tdefault: '#acbdd3',\n\t\t},\n\t},\n})\n\nexport default theme\n","import React, { useState, useEffect } from 'react'\nimport CounterDisplay from './components/CounterDisplay/CounterDisplay'\nimport SetUpDisplay from './components/SetUpDisplay/SetUpDisplay'\nimport './App.css'\nimport { Grid, Paper, makeStyles, ThemeProvider } from '@material-ui/core'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport theme from './styles/theme'\n\nconst useStyles = makeStyles({\n\tgrid: {\n\t\theight: '250px',\n\t\tmarginTop: '15vh',\n\t\t// flexWrap: 'nowrap',\n\t},\n\tpaper: {\n\t\twidth: '300px',\n\t\theight: '100%',\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'column',\n\t\tjustifyContent: 'space-around',\n\t\talignItems: 'center',\n\t},\n})\n\nfunction App() {\n\tconst [count, setCount] = useState(0)\n\tconst [startValue, setStartValue] = useState(0)\n\tconst [maxValue, setMaxValue] = useState(0)\n\tconst [error, setError] = useState('enter values and press \"set\"')\n\tconst [disabled, setDisabled] = useState(true)\n\n\tuseEffect(() => {\n\t\terrorHandler()\n\t\tgetLocalStorage()\n\t}, [startValue, maxValue]) // eslint-disable-line react-hooks/exhaustive-deps\n\n\tconst countHandler = () => {\n\t\tif (count < maxValue) setCount(count + 1)\n\t}\n\n\tconst errorHandler = () => {\n\t\tif (startValue < 0 || (startValue > 0 && startValue === maxValue) || maxValue < startValue) {\n\t\t\tsetError('Incorrect value')\n\t\t\tsetDisabled(true)\n\t\t} else {\n\t\t\tsetError('enter values and press \"set\"')\n\t\t\tmaxValue === 0 && startValue === 0 ? setDisabled(true) : setDisabled(false)\n\t\t}\n\t}\n\n\tconst setHandler = () => {\n\t\tif (startValue >= 0 && maxValue > startValue) {\n\t\t\tsetCount(startValue)\n\t\t\tsetError('')\n\t\t}\n\t\tsetDisabled(true)\n\t}\n\n\tconst localStorageHandler = () => {\n\t\tlocalStorage.setItem('startValue', startValue + '')\n\t\tlocalStorage.setItem('maxValue', maxValue + '')\n\t}\n\n\tconst getLocalStorage = () => {\n\t\tif (startValue === 0 && maxValue === 0) {\n\t\t\tconst sV = localStorage.getItem('startValue')\n\t\t\tconst mV = localStorage.getItem('maxValue')\n\t\t\tsV && setStartValue(+sV)\n\t\t\tmV && setMaxValue(+mV)\n\t\t\tlocalStorage.clear()\n\t\t}\n\t}\n\n\tconst reset = () => {\n\t\tsetCount(startValue)\n\t}\n\n\tconst classes = useStyles()\n\n\treturn (\n\t\t<ThemeProvider theme={theme}>\n\t\t\t<CssBaseline />\n\t\t\t<Grid container className={classes.grid} spacing={5} direction=\"row\" justify=\"center\" alignItems=\"stretch\">\n\t\t\t\t<Grid item xs={3} key={1}>\n\t\t\t\t\t<Paper className={classes.paper} elevation={3}>\n\t\t\t\t\t\t<SetUpDisplay\n\t\t\t\t\t\t\tsetStartValue={setStartValue}\n\t\t\t\t\t\t\tsetMaxValue={setMaxValue}\n\t\t\t\t\t\t\tstartValue={startValue}\n\t\t\t\t\t\t\tmaxValue={maxValue}\n\t\t\t\t\t\t\tsetHandler={setHandler}\n\t\t\t\t\t\t\tlocalStorageHandler={localStorageHandler}\n\t\t\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\t\t\terror={error}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Paper>\n\t\t\t\t</Grid>\n\t\t\t\t<Grid item xs={3} key={2}>\n\t\t\t\t\t<Paper className={classes.paper} elevation={3}>\n\t\t\t\t\t\t<CounterDisplay\n\t\t\t\t\t\t\tvalue={count}\n\t\t\t\t\t\t\tcountHandler={countHandler}\n\t\t\t\t\t\t\tstartValue={startValue}\n\t\t\t\t\t\t\tmaxValue={maxValue}\n\t\t\t\t\t\t\treset={reset}\n\t\t\t\t\t\t\terror={error}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Paper>\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t</ThemeProvider>\n\t)\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}